defmodule Gits.Repo.Migrations.AddEvent do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:payout_accounts, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :business_name, :text, null: false
      add :account_number, :text, null: false
      add :settlement_bank, :text, null: false
      add :percentage_charge, :decimal, null: false, default: "1.1"

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :host_id,
          references(:hosts,
            column: :id,
            name: "payout_accounts_host_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :archived_at, :utc_datetime_usec
    end

    alter table(:hosts) do
      modify :owner_id, :uuid, null: false
    end

    create table(:events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :public_id, :text, null: false
      add :payout_schedule, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :host_id,
          references(:hosts,
            column: :id,
            name: "events_host_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :payout_account_id,
          references(:payout_accounts,
            column: :id,
            name: "events_payout_account_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :archived_at, :utc_datetime_usec
    end

    create table(:event_details, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :description, :text, null: false
      add :visibility, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :event_id,
          references(:events,
            column: :id,
            name: "event_details_event_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :archived_at, :utc_datetime_usec
    end
  end

  def down do
    drop constraint(:event_details, "event_details_event_id_fkey")

    drop table(:event_details)

    drop constraint(:events, "events_host_id_fkey")

    drop constraint(:events, "events_payout_account_id_fkey")

    drop table(:events)

    alter table(:hosts) do
      modify :owner_id, :uuid, null: true
    end

    drop constraint(:payout_accounts, "payout_accounts_host_id_fkey")

    drop table(:payout_accounts)
  end
end
