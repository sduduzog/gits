defmodule Gits.Repo.Migrations.AddAttendeeResource do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:attendees, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "attendees_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :event_id,
          references(:events,
            column: :id,
            name: "attendees_event_id_fkey",
            type: :bigint,
            prefix: "public"
          )

      add :instance_id,
          references(:ticket_instances,
            column: :id,
            name: "attendees_instance_id_fkey",
            type: :bigint,
            prefix: "public"
          )
    end

    create unique_index(:attendees, [:user_id, :event_id, :instance_id],
             name: "attendees_admission_identity_index"
           )
  end

  def down do
    drop_if_exists unique_index(:attendees, [:user_id, :event_id, :instance_id],
                     name: "attendees_admission_identity_index"
                   )

    drop constraint(:attendees, "attendees_user_id_fkey")

    drop constraint(:attendees, "attendees_event_id_fkey")

    drop constraint(:attendees, "attendees_instance_id_fkey")

    drop table(:attendees)
  end
end
